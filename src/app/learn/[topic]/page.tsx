"use client"

import { useEffect, useState } from "react"
import { useParams } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { FlowChart } from "@/components/flow-chart"
import { QuizModal } from "@/components/quiz-modal"
import { UserAuthForm } from "@/components/user-auth-form"
import { BookOpen, Brain, CheckCircle, ChevronLeft, Home, Save, User } from "lucide-react"
import Link from "next/link"

export default function LearnPage() {
  const params = useParams()
  const topic = decodeURIComponent(params.topic as string)

  const [isLoading, setIsLoading] = useState(true)
  const [learningPath, setLearningPath] = useState<any>(null)
  const [selectedNode, setSelectedNode] = useState<string | null>(null)
  const [showAuthModal, setShowAuthModal] = useState(false)
  const [isAuthenticated, setIsAuthenticated] = useState(false)

  useEffect(() => {
    // Simulate API call to generate learning path
    const generateLearningPath = async () => {
      setIsLoading(true)

      // This would be an actual API call in production
      await new Promise((resolve) => setTimeout(resolve, 1500))

      // Example learning path for Machine Learning
      // In a real app, this would be generated by an AI based on the topic
      const mockLearningPath = {
        nodes: [
          { id: "1", label: "Introduction to Machine Learning", type: "start" },
          { id: "2", label: "Supervised Learning", type: "concept" },
          { id: "3", label: "Unsupervised Learning", type: "concept" },
          { id: "4", label: "Neural Networks", type: "advanced" },
          { id: "5", label: "Applications", type: "end" },
        ],
        edges: [
          { id: "e1-2", source: "1", target: "2" },
          { id: "e2-3", source: "2", target: "3" },
          { id: "e3-4", source: "3", target: "4" },
          { id: "e4-5", source: "4", target: "5" },
        ],
        quizzes: {
          "1": [
            {
              question: "What is Machine Learning?",
              options: [
                "A type of artificial intelligence that enables computers to learn without explicit programming",
                "A programming language for data science",
                "A database management system",
                "A cloud computing service",
              ],
              correctAnswer: 0,
            },
          ],
          "2": [
            {
              question: "What is Supervised Learning?",
              options: [
                "Learning with labeled data",
                "Learning without labels",
                "Only reinforcement learning",
                "Learning with partial supervision",
              ],
              correctAnswer: 0,
            },
          ],
          "3": [
            {
              question: "Which of these is an example of unsupervised learning?",
              options: [
                "Image classification",
                "Clustering customer data",
                "Predicting house prices",
                "Email spam detection",
              ],
              correctAnswer: 1,
            },
          ],
          "4": [
            {
              question: "What is a neural network?",
              options: [
                "A computer network architecture",
                "A biological network of neurons",
                "A computational model inspired by the human brain",
                "A network protocol for machine learning",
              ],
              correctAnswer: 2,
            },
          ],
          "5": [
            {
              question: "Which is NOT a common application of machine learning?",
              options: [
                "Image recognition",
                "Natural language processing",
                "Manual data entry",
                "Recommendation systems",
              ],
              correctAnswer: 2,
            },
          ],
        },
      }

      setLearningPath(mockLearningPath)
      setIsLoading(false)
    }

    generateLearningPath()
  }, [topic])

  const handleNodeClick = (nodeId: string) => {
    setSelectedNode(nodeId)
  }

  const handleCloseQuiz = () => {
    setSelectedNode(null)
  }

  const handleSaveProgress = () => {
    if (isAuthenticated) {
      // Save progress logic would go here
      console.log("Progress saved")
    } else {
      setShowAuthModal(true)
    }
  }

  return (
    <div className="min-h-screen flex flex-col">
      <header className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-14 items-center">
          <div className="mr-4 flex">
            <Link href="/" className="mr-2">
              <Button variant="ghost" size="sm">
                <Home className="h-4 w-4 mr-2" />
                Home
              </Button>
            </Link>
            <Button variant="ghost" size="sm" onClick={() => window.history.back()}>
              <ChevronLeft className="h-4 w-4 mr-2" />
              Back
            </Button>
          </div>
          <div className="flex-1 flex justify-center">
            <h1 className="text-lg font-semibold">Learning: {topic}</h1>
          </div>
          <div className="ml-auto flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={handleSaveProgress}>
              <Save className="h-4 w-4 mr-2" />
              Save Progress
            </Button>
            {!isAuthenticated && (
              <Button variant="outline" size="sm" onClick={() => setShowAuthModal(true)}>
                <User className="h-4 w-4 mr-2" />
                Sign In
              </Button>
            )}
          </div>
        </div>
      </header>

      <main className="flex-1 container py-6">
        {isLoading ? (
          <div className="flex flex-col items-center justify-center h-[60vh]">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            <p className="mt-4 text-lg">Generating your personalized learning path...</p>
          </div>
        ) : (
          <Tabs defaultValue="flowchart">
            <div className="flex justify-center mb-6">
              <TabsList>
                <TabsTrigger value="flowchart">
                  <Brain className="h-4 w-4 mr-2" />
                  Learning Path
                </TabsTrigger>
                <TabsTrigger value="progress">
                  <CheckCircle className="h-4 w-4 mr-2" />
                  Progress
                </TabsTrigger>
                <TabsTrigger value="resources">
                  <BookOpen className="h-4 w-4 mr-2" />
                  Resources
                </TabsTrigger>
              </TabsList>
            </div>

            <TabsContent value="flowchart" className="mt-0">
              <Card>
                <CardContent className="p-6">
                  <div className="h-[60vh] w-full">
                    {learningPath && (
                      <FlowChart nodes={learningPath.nodes} edges={learningPath.edges} onNodeClick={handleNodeClick} />
                    )}
                  </div>
                </CardContent>
              </Card>
              <div className="mt-4 text-center text-muted-foreground">
                <p>Click on any node to start learning that topic</p>
              </div>
            </TabsContent>

            <TabsContent value="progress">
              <Card>
                <CardContent className="p-6">
                  <div className="text-center py-12">
                    {isAuthenticated ? (
                      <div>
                        <h3 className="text-xl font-semibold mb-4">Your Learning Progress</h3>
                        <div className="space-y-4">
                          {learningPath?.nodes.map((node: any) => (
                            <div key={node.id} className="flex items-center justify-between p-3 border rounded-lg">
                              <span>{node.label}</span>
                              <span className="text-muted-foreground">Not started</span>
                            </div>
                          ))}
                        </div>
                      </div>
                    ) : (
                      <div className="py-8">
                        <h3 className="text-xl font-semibold mb-4">Sign in to track your progress</h3>
                        <Button onClick={() => setShowAuthModal(true)}>Sign In</Button>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="resources">
              <Card>
                <CardContent className="p-6">
                  <h3 className="text-xl font-semibold mb-4">Additional Resources</h3>
                  <div className="space-y-4">
                    <p>Here are some recommended resources to deepen your understanding of {topic}:</p>
                    <ul className="list-disc pl-5 space-y-2">
                      <li>Interactive tutorials</li>
                      <li>Recommended books</li>
                      <li>Online courses</li>
                      <li>Practice exercises</li>
                    </ul>
                    <p className="text-muted-foreground">
                      This section would be populated with AI-recommended resources based on your learning style and
                      progress.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        )}
      </main>

      {selectedNode && learningPath && (
        <QuizModal
          isOpen={!!selectedNode}
          onClose={handleCloseQuiz}
          title={learningPath.nodes.find((n: any) => n.id === selectedNode)?.label || ""}
          quizData={learningPath.quizzes[selectedNode] || []}
        />
      )}

      {showAuthModal && (
        <UserAuthForm
          isOpen={showAuthModal}
          onClose={() => setShowAuthModal(false)}
          onSuccess={() => {
            setIsAuthenticated(true)
            setShowAuthModal(false)
          }}
        />
      )}
    </div>
  )
}

